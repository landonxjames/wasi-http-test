use serde_json;
//This macro generates Rust types from the .wit file and identifies the structs
//to export for use in the WASM module. The cargo expand tool can be helpful to
//see the code generated by this macro
wit_bindgen::generate!({
world: "wasm-version-tests",
exports: {
    "wasm-version-tests:component/clients": WasmVersionTestsClients,
    "wasm-version-tests:component/events": WasmVersionTestsEvents,
},
additional_derives: [serde::Serialize, serde::Deserialize]});
use exports::wasm_version_tests::component::clients::Guest as ClientGuest;
use exports::wasm_version_tests::component::events::{Foo, Guest as EventGuest};

//Impl the traits from your .wit file on these structs
pub struct WasmVersionTestsClients;
pub struct WasmVersionTestsEvents;

impl ClientGuest for WasmVersionTestsClients {
    fn hello_world() -> String {
        return "Hello World".to_string();
    }
}

impl EventGuest for WasmVersionTestsEvents {
    fn parse(input: String) -> Result<Foo, String> {
        let parsed_val: Foo = serde_json::from_str(&input).map_err(|err| err.to_string())?;
        Ok(parsed_val)
    }
}
